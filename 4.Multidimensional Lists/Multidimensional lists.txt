Multidimesional lists:

MATRIX, CUBES, 3 DIMETIONAL LISTS:

What is matrix in python?: List of lists !!! two dimesional list !!! 

DECLARATION:

	two dimensional lists:
	--------------------------------------
	matrix = []

	for i in range(3):
	    matrix.append([])
	    for j in range(2):
      	  matrix[i].append(0)

	matrix --> [[0, 0], [0, 0], [0, 0]]
	--------------------------------------

	--------------------------------------
	matrix = []

	for i in range(3):
	    row = []
	    for j in range(3):
      	  row.append(j)
	    matrix.append(row)

	matrix --> [[0, 1, 2], [0, 1, 2], [0, 1, 2]]
	--------------------------------------

	tree dimesional lists:

	--------------------------------------
	matrix = []

	for i in range(3):
	    matrix.append([])
	    for j in range(3):
      	  matrix[i].append([])
	        for k in range(3):
      	      matrix[i][j].append(k)

	matrix --> [[[0, 1, 2], [0, 1, 2], [0, 1, 2]], [[0, 1, 2], [0, 1, 2], [0, 1, 2]], [[0, 1, 2], [0, 1, 2], [0, 1, 2]]]
	--------------------------------------

--------------------------------------------
Comprehension for two-dimensional matrix:
--------------------------------------------	
	-----------------------------------------------------------------
	matrix = [[x for x in input().split()] for _ in range(rows)],  lists of strings when rows are known
	-----------------------------------------------------------------
	
	-----------------------------------------------------------------
	matrix = [[int(x) for x in input().split()] for _ in range(rows)],  lists of integers when rows are known
	-----------------------------------------------------------------
	
	-----------------------------------------------------------------
	rows, cols = list(map(int, input().split())) - split input and make itegers 
	-----------------------------------------------------------------

	-----------------------------------------------------------------
	for row in matrix:                  # iterate true rows in matrix
    		print(' '.join(list(map(str, row))))    # print veery item on the row
		print(*row, sep=' ')			    # shor solution
	-----------------------------------------------------------------
	
	------------------------------------------------
	rows, cols = [int(x) for x in input().split()] 				# comprehension of two-dimensional matrix only

	for _ in range(rows):                                       	# create rows
    		matrix.append([int(x) for x in input().split(', ')])    	# fill up the columns in matrix from input with integers


	Creating matrix wit zeros:

	matrix = [[i for i in range(0, 4)] for _ in range(3)]			# creating matrix in one line nested comprehension
	matrix --> [[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]]			# result


	Flattened or unpacking matrix in one list:
	-------------------------------------
	matrix = [[1, 2, 3], [4, 5, 6]]

	flattened = [num for sublist in matrix for num in sublist]

	flattened --> [1, 2, 3, 4, 5, 6]
	-------------------------------------

	-------------------------------------
	# input:
	# 2
	# 1, 2, 3
	# 4, 5, 6

	rows = int(input())

	result = []

	for _ in range(rows):
    		result.extend(int(x) for x in input().split(', '))	# usage of extend is critical !!!

	print(result) --> [1, 2, 3, 4, 5, 6]
	-------------------------------------
	if we want to create the matrix:

	# input:
	# 2
	# 1, 2, 3
	# 4, 5, 6
	
	matrix = []
	for _ in range(rows):                               # cycle fot making the matrix
    		# result.extend(int(x) for x in input().split(', '))  # one line result with for cycle

    		row = [int(x) for x in input().split(', ')]     # split every row from input
    		matrix.append(row)                              # add the row into the matrix

	[result1.extend(row) for row in matrix]             # make result list like iterate true the matrix

	# print(result)
	print(result1)
	-------------------------------------


-------------------------------------------
NOTE! If we have input matrix but we don't need to save it somehwere, we can just use it and save the searched result. The ceartion of the matrix depends if we need to save it for later usage!
-------------------------------------------

	Jagged Array is matrix with different length of every column!

	
	ITERATION AND MANIPULATION OF MATRIX:

	iterate true matrix is executed with 2 for cycles. One for the rows and nested for the columns!

	len(matrix) = rows !!! 
	len(matrix[0]) = cloumns !!! 

	can use: for idx, value in enumerate(matrix) --> take index (row) and value (everything on the row)	

	-----------------------------------
	matrix = [
    	[1, 2, 3, 4],
    	[4, 5, 6],
    	[7, 8]
          ]

	comprehensions: 

		[print(row) for row in matrix]			# one line solution
		[print(num) for num in [j for j in matrix]]	# same solution but iterate true every item in every row, print item

	for row in range(len(matrix)):              	# iterate true rows
    		for col in range(len(matrix[row])):     	# iterate true column in the specific row
        		print(matrix[row][col], end=' ')    # print all elements in the sublist on one line
    		print()                                 	# make new row in printing
    
	# result:
	# 1 2 3 4 
	# 4 5 6 
	# 7 8 
	----------------------------------

	----------------------------------
	if we want to iterate true same item in column for every row, first make for cycle for columns and sub cycle for rows:

	# input:
	# 3, 6
	# 7 1 3 3 2 1
	# 1 3 9 8 5 6
	# 4 6 7 9 1 0

	rows, columns = [int(x) for x in input().split(', ')]		    # take rows and columns

	matrix = []
	for row in range(rows):                                         # creation of the matrix
    		matrix.append([int(x) for x in input().split()])          # filling of the matrix

	for col in range(columns):                                      # iterate true columns first
    		total = 0                                                 # reset total sum for every index in column
    		for row in range(rows):                                   # for same index in column iterate true rows
        	total += matrix[row][col]                                 # sum all items in same index in column for every row
    	print(total)                                                    # print the sum
	---------------------------------
	# input:
	# 3
	# 4, 3, 7, 3
	# 2, 5, 5, 5
	# 7, 3, 8, 5

	size = 3
	# one line solution to create the matrix from input if we know how many rows
	matrix = [[int(x) for x in input().split()] for _ in range(size)]
	---------------------------------

	---------------------------------------------------------------
	Easy way to find specific char in matrix:
	---------------------------------------------------------------	
		for row in range(size):           						# iterate true matrix size
    			if 'B' in matrix[row]:             					# check if char is in the current matrix row
        			target_coordinates = [row, matrix[row].index('B')]  	# save position


	---------------------------------------------------------------


Best ways to print matrix:

	1. [print(row) for row in matrix] --> print list of every row
	2. [print(*row) for row in matrix] --> print all items with no brackets splited by space
	3. [print(*row, sep=', ') for row in matrix] --> print all items with no brackets splited by comma



